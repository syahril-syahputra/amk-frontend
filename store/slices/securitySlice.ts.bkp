// import profile from '@/services/profile'
// import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
// import { AxiosError } from 'axios'

// export interface SecurityState {
//     isLoadingEmail: boolean
//     isLoadingPhone: boolean
//     email: boolean
//     phone: boolean
// }
// interface SecurityField {
//     status: boolean
//     userId: string
// }

// export const updateEmail = createAsyncThunk<SecurityField, SecurityField>(
//     'securoty/updateEmail',
//     async (params) => {
//         try {
//             await profile.updateSecurityEmail(params.status, params.userId)
//             return params
//         } catch (error) {
//             throw new Error('rejected')
//         }
//     },
// )
// export const updatePhone = createAsyncThunk<boolean, boolean>(
//     'securoty/updatePhone',
//     async (params, userId) => {
//         try {
//             await profile.updateSecurityPhone(params)
//             return params
//         } catch (error) {
//             throw new Error('rejected')
//         }
//     },
// )

// const useSlice = createSlice({
//     name: 'security',
//     initialState: {
//         isLoadingEmail: false,
//         isLoadingPhone: false,
//         email: true,
//         phone: true,
//     },
//     reducers: {},
//     extraReducers(builder) {
//         builder.addCase(updateEmail.fulfilled, (state, action: any) => {
//             state.isLoadingEmail = false
//             state.email = action.payload
//         })
//         builder.addCase(updateEmail.pending, (state) => {
//             state.isLoadingEmail = true
//         })
//         builder.addCase(updateEmail.rejected, (state, action: any) => {
//             state.isLoadingEmail = false
//         })
//         builder.addCase(updatePhone.fulfilled, (state, action: any) => {
//             state.isLoadingPhone = false
//             state.phone = action.payload
//         })
//         builder.addCase(updatePhone.pending, (state) => {
//             state.isLoadingPhone = true
//         })
//         builder.addCase(updatePhone.rejected, (state, action: any) => {
//             state.isLoadingPhone = false
//         })
//     },
// })
// export default useSlice.reducer
